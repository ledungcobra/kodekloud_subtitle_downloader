WEBVTT

1
00:00:00.619 --> 00:00:03.556
Now we will take a look at
the different types of shells.

2
00:00:04.392 --> 00:00:06.813
There are several different
shells in Linux.

3
00:00:07.283 --> 00:00:09.283
Some of the most popular ones are

4
00:00:09.778 --> 00:00:10.786
Bourne shell,

5
00:00:11.201 --> 00:00:15.293
developed in the 1970s for
Unix and still in use today.

6
00:00:16.336 --> 00:00:17.349
C shell,

7
00:00:17.748 --> 00:00:18.772
Korn shell,

8
00:00:19.090 --> 00:00:20.098
Z shell

9
00:00:20.392 --> 00:00:21.789
and the Bourne-again shell,

10
00:00:22.156 --> 00:00:23.966
which is often called as Bash.

11
00:00:25.128 --> 00:00:29.112
These shells may differ in different
ways in their core capabilities,

12
00:00:29.545 --> 00:00:31.925
but all of them have
one common purpose,

13
00:00:32.476 --> 00:00:35.238
to facilitate the communication between the user

14
00:00:35.634 --> 00:00:36.911
and the operating system.

15
00:00:38.176 --> 00:00:39.874
To check the shell being used,

16
00:00:40.190 --> 00:00:43.016
use the command echo $SHELL

17
00:00:43.367 --> 00:00:45.875
with uppercase letters
for the word shell.

18
00:00:47.189 --> 00:00:48.959
Bob checks this in his own system

19
00:00:49.412 --> 00:00:52.086
and sees that his default shell
is the Bash shell.

20
00:00:53.099 --> 00:00:55.626
Bash is perhaps the most
popular shell,

21
00:00:55.936 --> 00:00:57.666
specifically because of its features

22
00:00:57.834 --> 00:00:59.508
such as Bash completions

23
00:00:59.860 --> 00:01:01.114
or brace expansion,

24
00:01:01.529 --> 00:01:04.473
which is not available in shells
such as the Bourne shell.

25
00:01:05.716 --> 00:01:07.239
To change the default shell,

26
00:01:07.599 --> 00:01:10.194
use the command chsh.

27
00:01:10.765 --> 00:01:13.661
You will be prompted for
the password and following that,

28
00:01:14.078 --> 00:01:15.419
the new value of the shell.

29
00:01:16.088 --> 00:01:18.873
You will have to log into
a new terminal session

30
00:01:18.953 --> 00:01:20.358
to see this change, though.

31
00:01:23.634 --> 00:01:26.666
Let us now take a quick look
at the features of the Bash shell.

32
00:01:27.713 --> 00:01:30.316
Bash supports command
auto-completion.

33
00:01:30.811 --> 00:01:31.829
What this means is,

34
00:01:31.905 --> 00:01:35.167
Bash will attempt to auto-complete
commands for you

35
00:01:35.518 --> 00:01:38.217
if you type a part of it
and press the tab key.

36
00:01:38.990 --> 00:01:42.839
This feature can extend to completing
a file or a directory name,

37
00:01:43.252 --> 00:01:45.617
commands, its arguments and options.

38
00:01:46.254 --> 00:01:47.431
This is very handy,

39
00:01:47.852 --> 00:01:50.233
especially when navigating
through the Linux system.

40
00:01:51.420 --> 00:01:54.414
You do not have to remember
or type in the entire name of

41
00:01:54.550 --> 00:01:56.272
directories or files,

42
00:01:56.789 --> 00:02:00.162
just type in the first few
characters of a file or directory

43
00:02:00.839 --> 00:02:04.919
and use tab space to take advantage
of the auto-complete feature.

44
00:02:06.217 --> 00:02:10.615
In Bash, we can set custom aliases
for the actual commands.

45
00:02:11.190 --> 00:02:12.198
In this example,

46
00:02:12.321 --> 00:02:16.356
we are setting an alias called "DT"
to the command called date,

47
00:02:16.923 --> 00:02:19.883
which as the name suggests
prints the current date.

48
00:02:20.986 --> 00:02:22.510
Once the alias is set,

49
00:02:22.910 --> 00:02:26.719
you can type the dt command
every time you want to print the date.

50
00:02:27.579 --> 00:02:31.383
Use the history command to get
a list of previously run commands.

51
00:02:31.902 --> 00:02:32.948
This is quite useful

52
00:02:33.014 --> 00:02:36.260
to revisit and check some of
the commands you ran earlier.

53
00:02:39.665 --> 00:02:42.165
Do you remember how to check
the shell you are using?

54
00:02:42.858 --> 00:02:44.414
"That was already explained,"

55
00:02:44.965 --> 00:02:45.989
Bob thinks.

56
00:02:46.425 --> 00:02:49.258
We have to type in echo $SHELL,

57
00:02:50.504 --> 00:02:52.266
but what is $SHELL?

58
00:02:52.856 --> 00:02:55.165
It is a variable and to be
more specific,

59
00:02:55.691 --> 00:02:57.349
it is an environment variable.

60
00:02:58.275 --> 00:03:01.315
Variables just as in any
programming language

61
00:03:01.721 --> 00:03:03.682
are used to store information.

62
00:03:04.814 --> 00:03:07.753
In this example,
the word SHELL in uppercase

63
00:03:08.110 --> 00:03:10.166
represents an environmental variable,

64
00:03:10.508 --> 00:03:12.772
which stores the value of
the type of shell used

65
00:03:13.114 --> 00:03:14.146
by the user

66
00:03:14.798 --> 00:03:16.306
to print the variable value.

67
00:03:16.682 --> 00:03:18.333
We proceed the variable name

68
00:03:18.719 --> 00:03:19.743
with a $ symbol.

69
00:03:20.882 --> 00:03:24.231
We will learn more about variables
in the second and final chapter

70
00:03:24.614 --> 00:03:25.805
of this quick-start guide.

71
00:03:27.117 --> 00:03:29.166
Environment variables in specific,

72
00:03:29.587 --> 00:03:32.772
store information about
the user's login session,

73
00:03:33.132 --> 00:03:36.045
which is used by the shell
when executing commands.

74
00:03:36.936 --> 00:03:39.094
To see a list of
all environment variables,

75
00:03:39.632 --> 00:03:41.656
use the env command.

76
00:03:42.478 --> 00:03:44.192
To set an environment variable,

77
00:03:44.575 --> 00:03:46.480
we can use the export command.

78
00:03:47.871 --> 00:03:50.429
Say you want to create
a new environment variable

79
00:03:50.572 --> 00:03:51.588
called office

80
00:03:52.064 --> 00:03:54.247
and set a value of caleston to it.

81
00:03:54.926 --> 00:03:57.392
Use the export command
and in the argument,

82
00:03:57.837 --> 00:03:59.996
use office = caleston.

83
00:04:01.064 --> 00:04:03.556
This will set the variable for
the current shell

84
00:04:03.780 --> 00:04:07.407
and any other processes or
programs started by the shell.

85
00:04:08.356 --> 00:04:11.610
You can also assign the variable
without the export command

86
00:04:12.233 --> 00:04:13.289
like this.

87
00:04:13.608 --> 00:04:15.425
However, this will only apply

88
00:04:15.528 --> 00:04:17.187
the variable within the shell.

89
00:04:17.850 --> 00:04:21.113
The value is not carried forward
to any other process.

90
00:04:21.966 --> 00:04:26.190
To make these variables persistent
over subsequent login or reboots,

91
00:04:26.827 --> 00:04:31.362
add them to the dot profile or
dot pam underscore environment file

92
00:04:31.712 --> 00:04:33.180
in the user's home directory.

93
00:04:34.257 --> 00:04:36.929
Bob prints out all
the environment variables

94
00:04:37.057 --> 00:04:38.708
using the env command

95
00:04:39.219 --> 00:04:41.441
and also tries to print them
individually

96
00:04:41.905 --> 00:04:44.596
by using the echo command,
followed by $

97
00:04:45.112 --> 00:04:46.676
variable name as the argument.

98
00:04:47.735 --> 00:04:51.044
He checks the log name
and sees that it is set to Bob.

99
00:04:54.375 --> 00:04:56.548
Speaking about the environment
variables,

100
00:04:56.933 --> 00:04:59.933
when a user issues an external
command into the shell,

101
00:05:00.609 --> 00:05:02.823
the shell uses a path variable

102
00:05:03.211 --> 00:05:05.314
to search for these external
commands.

103
00:05:06.404 --> 00:05:09.290
To see the directories defined
in the path variable,

104
00:05:09.687 --> 00:05:12.441
use the command echo $ path.

105
00:05:13.566 --> 00:05:14.620
Bob tries it

106
00:05:14.762 --> 00:05:18.129
and sees a really long list of
directories in his path.

107
00:05:19.515 --> 00:05:22.262
If the path variable does not
have the location of

108
00:05:22.453 --> 00:05:24.358
a command or a program defined,

109
00:05:24.846 --> 00:05:27.910
running a command by
itself will result in a failure.

110
00:05:28.993 --> 00:05:31.897
To check if the location of
a command can be identified,

111
00:05:32.346 --> 00:05:34.148
use the which command.

112
00:05:35.319 --> 00:05:36.342
In this example,

113
00:05:36.493 --> 00:05:39.560
we are checking the example of
a video editing program

114
00:05:39.632 --> 00:05:41.624
called OBS Studio.

115
00:05:42.229 --> 00:05:43.237
As you can see,

116
00:05:43.324 --> 00:05:45.562
this command did not provide
a location.

117
00:05:46.184 --> 00:05:48.550
Running this command results
in an error

118
00:05:48.933 --> 00:05:50.401
"command not found."

119
00:05:51.290 --> 00:05:53.544
This is because the path to
this program

120
00:05:53.951 --> 00:05:56.125
is not defined in the path variable.

121
00:05:57.262 --> 00:05:58.199
To add it,

122
00:05:58.335 --> 00:06:00.470
we can use the export command again.

123
00:06:01.272 --> 00:06:02.336
Run the command

124
00:06:02.592 --> 00:06:05.179
export PATH=$PATH

125
00:06:05.699 --> 00:06:09.812
and append the path of the OBS
Studio using the colon as separator.

126
00:06:10.991 --> 00:06:12.070
In this example,

127
00:06:12.340 --> 00:06:19.449
the path to OBS Studio
is /opt/OBS/bin.

128
00:06:20.794 --> 00:06:21.842
Once this is done,

129
00:06:22.138 --> 00:06:25.995
we can check that the path is
set by using the which command again.

130
00:06:29.294 --> 00:06:31.294
We are coming to the end of
chapter one. I

131
00:06:31.847 --> 00:06:34.997
n this final part, we will customize
the Bash prompt.

132
00:06:35.937 --> 00:06:37.135
Bob reads further.

133
00:06:38.046 --> 00:06:39.975
Once you are logged
into the Bash shell,

134
00:06:40.374 --> 00:06:42.779
the line you see is called
the Bash prompt.

135
00:06:43.480 --> 00:06:46.956
This can provide meaningful
information about the logged in user,

136
00:06:47.380 --> 00:06:48.390
name of the system

137
00:06:48.763 --> 00:06:50.295
and the location on the system.

138
00:06:51.187 --> 00:06:53.958
Right now it's only showing
the current working directory

139
00:06:54.109 --> 00:06:55.125
for the user.

140
00:06:55.754 --> 00:06:59.151
This can, however, be customized to
show what you need to see.

141
00:07:00.387 --> 00:07:01.379
For example,

142
00:07:01.516 --> 00:07:04.802
it can be customized to show
the username and the host name.

143
00:07:05.447 --> 00:07:06.931
This is especially helpful

144
00:07:07.298 --> 00:07:09.602
when a user is logged into
multiple systems

145
00:07:09.975 --> 00:07:11.514
through multiple terminals.

146
00:07:11.963 --> 00:07:14.050
It lets you know which host
you are on,

147
00:07:14.473 --> 00:07:16.823
so you are sure you are working on
the right server.

148
00:07:18.192 --> 00:07:20.947
The Bash prompt is set
and controlled by a set of

149
00:07:21.058 --> 00:07:23.344
special shell environment variables.

150
00:07:23.922 --> 00:07:25.605
The most common of these variables

151
00:07:25.957 --> 00:07:27.385
and the one we will focus on

152
00:07:27.722 --> 00:07:29.460
is the PS1 variable.

153
00:07:30.250 --> 00:07:32.607
To see the value assigned to PS1,

154
00:07:33.093 --> 00:07:35.752
type echo $PS1.

155
00:07:36.867 --> 00:07:39.708
Here, the value \W

156
00:07:40.254 --> 00:07:42.598
represents the current
working directory.

157
00:07:43.276 --> 00:07:44.892
The $ symbol following that

158
00:07:45.284 --> 00:07:47.006
is a symbol for the user prompt.

159
00:07:50.326 --> 00:07:54.310
The document gives handy tips on
how to customize the Bash prompt.

160
00:07:55.452 --> 00:07:58.142
Let us now look at ways to
customize the prompt

161
00:07:58.351 --> 00:08:00.454
by updating PS1 variable.

162
00:08:01.037 --> 00:08:03.021
Bash displays the primary prompt

163
00:08:03.451 --> 00:08:05.928
PS1 when it is ready to
read a command.

164
00:08:07.026 --> 00:08:08.487
Let's now change the prompt

165
00:08:08.949 --> 00:08:10.197
to only display the word

166
00:08:10.602 --> 00:08:11.880
Ubuntu server.

167
00:08:13.113 --> 00:08:14.121
In this example,

168
00:08:14.344 --> 00:08:18.020
we are changing the value of
PS1 to Ubuntu server,

169
00:08:18.434 --> 00:08:19.561
followed by a colon.

170
00:08:20.492 --> 00:08:21.968
Once this command is run,

171
00:08:22.301 --> 00:08:24.254
the prompt should immediately change.

172
00:08:25.027 --> 00:08:26.638
These can be customized further

173
00:08:27.109 --> 00:08:29.887
by inserting a number of
backslash escape

174
00:08:30.135 --> 00:08:31.405
special characters.

175
00:08:32.718 --> 00:08:34.544
Let's now use some of
these characters

176
00:08:34.779 --> 00:08:36.676
to customize our prompt further.

177
00:08:37.815 --> 00:08:42.332
Making use of the \d \t \u,

178
00:08:42.814 --> 00:08:44.013
we can print the date,

179
00:08:44.540 --> 00:08:48.548
time and username before
the @ symbol.

180
00:08:49.909 --> 00:08:53.663
Following this, using the \h and \w,

181
00:08:54.064 --> 00:08:55.433
we can print the host name

182
00:08:55.747 --> 00:08:58.113
and the present working
directory of the user.

183
00:08:58.914 --> 00:09:02.978
This is followed by the $ symbol,
indicating that it is a regular user.

184
00:09:04.196 --> 00:09:06.865
Check out the reference section
for the complete list

185
00:09:07.040 --> 00:09:09.194
of these special characters
that may be used

186
00:09:09.297 --> 00:09:10.893
to customize the Bash prompt.

187
00:09:14.319 --> 00:09:17.025
This ends the chapter one of
the quick-start guide.

188
00:09:17.870 --> 00:09:21.649
Bob sees that there is another
hands-on lab following the chapter

189
00:09:22.152 --> 00:09:25.786
and remembers Andrew's words
to complete them by the next day.

190
00:09:27.397 --> 00:09:30.880
Head over to the hands-on lab
to play around with the Bash shell.

