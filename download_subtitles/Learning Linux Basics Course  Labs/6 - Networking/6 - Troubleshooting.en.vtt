WEBVTT

1
00:00:00.740 --> 00:00:03.860
"Now that we have some
understanding of how DNS

2
00:00:03.860 --> 00:00:05.180
and networking works,

3
00:00:05.180 --> 00:00:07.480
let's take a look at your issue again,

4
00:00:07.480 --> 00:00:09.760
and try to troubleshoot the cause,"

5
00:00:09.760 --> 00:00:10.840
says Jacqui.

6
00:00:11.340 --> 00:00:13.320
Bob nods in appreciation.

7
00:00:15.320 --> 00:00:17.600
Jacqui begins troubleshooting the issue.

8
00:00:18.040 --> 00:00:22.400
To recap, we established that the URL
you were using is wrong,

9
00:00:22.400 --> 00:00:27.920
and that the correct address
is caleston-repo-01.

10
00:00:28.940 --> 00:00:31.560
When we try to access this new URL,

11
00:00:31.560 --> 00:00:34.100
we are getting a connection timeout error.

12
00:00:35.920 --> 00:00:38.960
This can happen due to a variety of reasons.

13
00:00:38.960 --> 00:00:41.680
It could be an issue
with your local interface

14
00:00:41.680 --> 00:00:43.460
not being connected to the network,

15
00:00:43.460 --> 00:00:46.200
or it could be your host not resolving

16
00:00:46.200 --> 00:00:49.120
the IP address of the host name
you were trying to connect to,

17
00:00:49.120 --> 00:00:52.000
or it could be an issue
with the route to the server,

18
00:00:52.000 --> 00:00:54.820
or it could be an issue with the server itself.

19
00:00:54.820 --> 00:00:58.040
Maybe the server itself
has connectivity issues,

20
00:00:58.040 --> 00:01:02.060
or the software that hosts the service
isn't functioning correctly.

21
00:01:02.060 --> 00:01:04.820
We'll see how to perform a standard network

22
00:01:04.820 --> 00:01:07.980
troubleshooting technique
to inspect each of these areas.

23
00:01:08.680 --> 00:01:11.620
We will start with our host's IP connectivity.

24
00:01:11.620 --> 00:01:15.460
Check the local interface
by running the IP link command

25
00:01:15.460 --> 00:01:17.940
and ensure the primary interface is up.

26
00:01:18.460 --> 00:01:25.200
In this case, the network interface
used is named enp1s0f1

27
00:01:25.680 --> 00:01:29.440
and we can see that the state is up,
so that's a good start.

28
00:01:31.360 --> 00:01:33.920
Next, we check if we can resolve

29
00:01:33.920 --> 00:01:36.040
the host name to an IP address.

30
00:01:36.040 --> 00:01:40.420
For this, run an NSlookup command
against the host name

31
00:01:40.420 --> 00:01:43.320
and make sure it is resolving to a valid IP.

32
00:01:43.840 --> 00:01:47.460
The NSlookup command
reaches out to the DNS server,

33
00:01:47.460 --> 00:01:53.860
which is at address
192.168.1.100, in this case,

34
00:01:53.860 --> 00:01:57.040
and requests
for the IP address of the host name.

35
00:01:57.600 --> 00:02:03.680
It returns that the IP of the server
is 192.168.2.5,

36
00:02:04.180 --> 00:02:05.500
so that's working too.

37
00:02:07.300 --> 00:02:10.600
Next, we try to ping
the remote server to check

38
00:02:10.600 --> 00:02:11.840
if we get a response.

39
00:02:11.840 --> 00:02:14.340
We see that we don't get a response.

40
00:02:14.340 --> 00:02:17.460
We sent three packets
and received zero back.

41
00:02:17.460 --> 00:02:20.360
There was a 100% packet loss.

42
00:02:21.160 --> 00:02:24.540
Ping is often not the best tool
to check connectivity,

43
00:02:24.540 --> 00:02:26.820
as many networks would have disabled it.

44
00:02:27.340 --> 00:02:28.900
However, it's worth a shot.

45
00:02:29.460 --> 00:02:32.740
The issue lies between
our system and the server.

46
00:02:32.740 --> 00:02:35.000
Something is wrong along the route

47
00:02:35.000 --> 00:02:36.840
between our system and the server.

48
00:02:36.840 --> 00:02:38.020
Let's find out.

49
00:02:40.020 --> 00:02:42.200
To troubleshoot an issue with the route

50
00:02:42.200 --> 00:02:44.200
we run the trace route command.

51
00:02:44.200 --> 00:02:48.880
This will show us the number of hops
or devices between the source,

52
00:02:48.880 --> 00:02:51.460
which is the laptop, and the repo server.

53
00:02:52.000 --> 00:02:54.300
It will also show if there is a problem

54
00:02:54.300 --> 00:02:56.700
with any of the devices in the network route

55
00:02:56.700 --> 00:02:58.840
between the source and destination.

56
00:02:59.560 --> 00:03:03.040
From the output,
we see that there are two routers,

57
00:03:03.040 --> 00:03:07.440
the first one at 192.168.1.1

58
00:03:07.440 --> 00:03:12.320
and the second at 192.168.2.1,

59
00:03:12.840 --> 00:03:15.020
and the connection to both of them is okay.

60
00:03:15.660 --> 00:03:18.560
However, the request timed out between

61
00:03:18.560 --> 00:03:20.060
the second router and the server,

62
00:03:20.060 --> 00:03:22.440
so that's where the issue is.

63
00:03:22.900 --> 00:03:26.520
Looking at the repo server itself
will give us more idea

64
00:03:26.520 --> 00:03:27.840
on what the issue could be.

65
00:03:27.840 --> 00:03:30.520
It's time to troubleshoot from the other end.

66
00:03:32.520 --> 00:03:34.440
"Since Dave is not around,

67
00:03:34.440 --> 00:03:36.640
let us try to contact someone else

68
00:03:36.640 --> 00:03:38.080
from the Linux support team

69
00:03:38.080 --> 00:03:40.820
and see if we can set up
a screen sharing session,"

70
00:03:40.820 --> 00:03:42.160
says Jacqui.

71
00:03:42.880 --> 00:03:45.240
Jacqui arranges a session with the team.

72
00:03:46.140 --> 00:03:48.320
Once a screen share is set up,

73
00:03:48.320 --> 00:03:52.880
Jacqui checks if the HTTP process
is running on port 80.

74
00:03:52.880 --> 00:03:55.820
The NETSTAT command, she explains,

75
00:03:55.820 --> 00:03:59.240
can be used to print the information
of network connections

76
00:03:59.240 --> 00:04:02.940
routing tables and several other
network statistics.

77
00:04:03.440 --> 00:04:05.780
In this case, the command shows

78
00:04:05.780 --> 00:04:08.100
information of active ports in the system,

79
00:04:08.100 --> 00:04:10.560
and we are looking specifically to see

80
00:04:10.560 --> 00:04:12.720
if the Port 80 is listening on the server.

81
00:04:13.680 --> 00:04:15.300
We see that it is listening.

82
00:04:15.300 --> 00:04:17.600
That means the web server is up.

83
00:04:19.480 --> 00:04:21.920
Jacqui then inspects the interfaces

84
00:04:21.920 --> 00:04:24.040
using the same command as before,

85
00:04:24.040 --> 00:04:28.820
the IP link command,
she sees the interface is down.

86
00:04:28.820 --> 00:04:31.700
That's the root cause of the problem.

87
00:04:32.260 --> 00:04:37.100
She tries to bring it up using
the IP link set dev up command,

88
00:04:37.100 --> 00:04:38.880
and it is now enabled.

89
00:04:39.300 --> 00:04:41.340
"That should have solved the problem,"

90
00:04:41.340 --> 00:04:42.460
says Jacqui.

91
00:04:44.260 --> 00:04:46.980
After thanking the support
from the Linux team,

92
00:04:46.980 --> 00:04:49.860
and leaving them to do a root cause analysis

93
00:04:49.860 --> 00:04:52.360
as to why the network interface was down,

94
00:04:52.360 --> 00:04:55.480
Jacqui proceeds to test the URL again.

95
00:04:55.480 --> 00:04:59.520
This time she was able to access it
and so was Bob.

96
00:04:59.520 --> 00:05:03.620
"Fantastic, it's working," says Bob.

97
00:05:04.300 --> 00:05:07.800
He thanks Jacqui for her time
and heads back to his desk.

