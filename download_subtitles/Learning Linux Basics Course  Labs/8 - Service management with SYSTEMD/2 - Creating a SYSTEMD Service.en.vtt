WEBVTT

1
00:00:03.980 --> 00:00:07.220
-In this section,
we will learn service management

2
00:00:07.240 --> 00:00:11.380
with SYSTEMD by creating
the service unit from scratch.

3
00:00:11.400 --> 00:00:14.620
We will then look at the tools
used by SYSTEMD,

4
00:00:14.650 --> 00:00:19.020
specifically systemctl
and journalctl.

5
00:00:19.040 --> 00:00:24.580
We will close this section
with a hands-on lab exercise.

6
00:00:24.600 --> 00:00:28.340
Bob provides his list of requirements
to Dave.

7
00:00:28.360 --> 00:00:33.700
He has a shell script
called project-mercury.sh

8
00:00:33.720 --> 00:00:36.890
located at /user/bin.

9
00:00:36.910 --> 00:00:40.090
This has to be started
in the background as a service

10
00:00:40.110 --> 00:00:43.090
and enabled to start during the boot.

11
00:00:43.110 --> 00:00:47.870
This script starts his python
Django application on the laptop.

12
00:00:47.890 --> 00:00:52.430
The application however,
depends on the Postgres Database.

13
00:00:52.450 --> 00:00:56.710
The Postgres service should be up
and running before the python application

14
00:00:56.720 --> 00:00:58.980
can be started successfully.

15
00:00:58.990 --> 00:01:02.810
A service account
by the name of project_mercury

16
00:01:02.830 --> 00:01:05.820
has already been created in the system.

17
00:01:05.840 --> 00:01:09.490
The service should make use
of this user to run.

18
00:01:09.520 --> 00:01:14.700
If the application fails for any reason,
it should restart automatically.

19
00:01:14.720 --> 00:01:18.500
If it fails again,
Bob wants to ensure that the system tries

20
00:01:18.510 --> 00:01:21.760
to bring it up after waiting for 10 seconds.

21
00:01:21.780 --> 00:01:26.140
Bob should, however,
be able to shut down the service himself.

22
00:01:26.170 --> 00:01:30.100
In this case,
it should not restart automatically.

23
00:01:30.120 --> 00:01:35.140
The application events including start,
stop, and failures

24
00:01:35.150 --> 00:01:37.840
should be logged in the system somewhere.

25
00:01:37.860 --> 00:01:43.040
This is important so that the reason
for the failure can be investigated later.

26
00:01:43.060 --> 00:01:47.170
Bob uses the graphical target
as a default on his laptop.

27
00:01:47.190 --> 00:01:52.940
The service should start with all these
conditions and the graphical target.

28
00:01:52.960 --> 00:01:57.910
Dave looks at his list and says,
"That's a lot of requirements.

29
00:01:57.930 --> 00:02:03.160
To make it easier, let's take one condition
at a time and build on it."

30
00:02:03.180 --> 00:02:08.080
He continues with the explanation,
"To run this command in the background,

31
00:02:08.100 --> 00:02:10.770
we have to define it as a service.

32
00:02:10.780 --> 00:02:14.320
For this, we will create a service unit file.

33
00:02:14.340 --> 00:02:16.800
This unit file, let's call it

34
00:02:16.820 --> 00:02:27.170
project-mercury.service needs to be created
under /etc/systemd/systemdirectory.

35
00:02:27.190 --> 00:02:30.740
Let's start with the command
that you need to run in the background

36
00:02:30.760 --> 00:02:39.210
which, in this case, is
/usr/bin/project-mercury.sh.

37
00:02:39.220 --> 00:02:43.760
The most basic service unit
can be built with just this information.

38
00:02:43.790 --> 00:02:47.160
The body of this service unit looks like this.

39
00:02:47.180 --> 00:02:52.370
We have a section called service
which is enclosed between square brackets

40
00:02:52.390 --> 00:02:56.520
and underneath,
we have a derivative called ExecStart

41
00:02:56.540 --> 00:03:00.140
which is used to run a command
or an application.

42
00:03:00.150 --> 00:03:04.400
Since this is a bash script,
we will specify the command as

43
00:03:04.420 --> 00:03:11.610
/bin/bash followed by the absolute path
to the script as the argument.

44
00:03:11.630 --> 00:03:12.720
That's it.

45
00:03:12.740 --> 00:03:17.460
A service definition can be created
with just these two lines.

46
00:03:17.480 --> 00:03:22.380
To run this service in the background,
issue the command systemctl

47
00:03:22.400 --> 00:03:25.670
start projectMercury.service.

48
00:03:25.690 --> 00:03:28.210
You would have to use pseudo at this time

49
00:03:28.220 --> 00:03:32.420
as the service is set to run
as the root user by default.

50
00:03:32.430 --> 00:03:35.690
Your script
should now be running in the background.

51
00:03:35.720 --> 00:03:43.030
To check this, you can issue the command
systemctl status projectmercury.service.

52
00:03:43.040 --> 00:03:45.490
It should be in a running state.

53
00:03:45.510 --> 00:03:50.040
That's one of the requirements completed,
but we are not done.

54
00:03:50.060 --> 00:03:54.020
Sure this service runs in the background,
but it cannot be enabled

55
00:03:54.020 --> 00:03:57.190
to start automatically during boot yet.

56
00:03:57.210 --> 00:04:00.610
Let's fix that by updating the service unit.

57
00:04:00.630 --> 00:04:09.910
First, let's stop the service using systemctl
stop projectmercury.service command.

58
00:04:09.940 --> 00:04:16.050
To allow this service to be enabled during
boot, add another section called install.

59
00:04:16.080 --> 00:04:18.270
Just as we did with the service section,

60
00:04:18.290 --> 00:04:23.440
the keyword install should be enclosed
between square brackets.

61
00:04:23.460 --> 00:04:26.990
Under this, use the WantedBy directive

62
00:04:27.010 --> 00:04:33.060
whose value should be the systemd target
or run level you want to enable it for.

63
00:04:33.080 --> 00:04:40.410
Since you are running in graphical mode,
we will set the value to graphical.target.

64
00:04:40.440 --> 00:04:43.060
One more requirement is complete.

65
00:04:43.080 --> 00:04:48.150
Let's add the service account to be used
to start the service instead of root,

66
00:04:48.170 --> 00:04:49.760
which is the default.

67
00:04:49.780 --> 00:04:54.490
To do this, add another directive
under the service section.

68
00:04:54.510 --> 00:05:01.150
The directive name is user and we can assign
the value of project_mercury to it.

69
00:05:01.170 --> 00:05:06.280
We can now build on this and add a couple
more directives based on the requirements.

70
00:05:06.310 --> 00:05:12.590
Use the restart derivative which defines
how and when to restart the service.

71
00:05:12.610 --> 00:05:16.640
Set the value of this derivative
to on-failure.

72
00:05:16.660 --> 00:05:19.970
This will ensure that the system attempts
to restart the service

73
00:05:19.980 --> 00:05:22.190
should it fail for some reason.

74
00:05:22.210 --> 00:05:28.100
Since we have set a restart derivative,
we can use the RestartSec derivative

75
00:05:28.130 --> 00:05:33.150
to set the time in seconds to wait before
the system attempts to restart it.

76
00:05:33.170 --> 00:05:35.400
We will set this to 10.

77
00:05:35.420 --> 00:05:40.450
Finally, with systemd, the service events
are automatically logged.

78
00:05:40.470 --> 00:05:47.890
This requirement is automatically taken
of without any additional configuration.

79
00:05:47.910 --> 00:05:52.080
Now we can start the service again,
but before we do that,

80
00:05:52.100 --> 00:05:55.120
there is an opportunity
to make it even better.

81
00:05:55.130 --> 00:05:59.840
Since the python Django application
depends on the Postgres service,

82
00:05:59.870 --> 00:06:04.070
we can define a dependency that makes sure
that our new service is started

83
00:06:04.090 --> 00:06:07.740
only after the Postgres database is ready.

84
00:06:07.770 --> 00:06:12.930
To do this, we need to add another section
to the service file called Unit.

85
00:06:12.950 --> 00:06:20.320
Under this section, use the After derivative
and set its value to Postgressql.service.

86
00:06:20.340 --> 00:06:24.430
Within this section, you can also add
the description of the service

87
00:06:24.450 --> 00:06:27.850
and any documentation you may have about it.

88
00:06:27.870 --> 00:06:32.380
These are not mandatory
but considered to be a good practice.

89
00:06:32.400 --> 00:06:35.470
Now we are ready to start this service again.

90
00:06:35.490 --> 00:06:38.980
For the system to detect
the changes we made in the file,

91
00:06:38.990 --> 00:06:44.390
run the systemctl deamon-reload command.

92
00:06:44.420 --> 00:06:47.870
To summarize,
all your requirements can be mapped

93
00:06:47.900 --> 00:06:52.560
to specific sections of the service file
by making use of derivatives

94
00:06:52.580 --> 00:06:54.820
which would look like this.

95
00:06:54.840 --> 00:06:59.830
The dependency on the Postgres Database
goes to the unit section.

96
00:06:59.840 --> 00:07:04.130
The requirements specifying the service
to start in graphical target

97
00:07:04.140 --> 00:07:09.790
goes to the install section.
Everything else goes to the service section.

98
00:07:09.810 --> 00:07:11.760
Bob makes a note of the steps

99
00:07:11.780 --> 00:07:16.770
with the intention of replicating it
in the dev server later.
