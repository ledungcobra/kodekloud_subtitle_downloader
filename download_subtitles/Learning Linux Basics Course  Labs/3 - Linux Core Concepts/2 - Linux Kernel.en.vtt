WEBVTT

1
00:00:01.500 --> 00:00:02.700
In this section,

2
00:00:02.700 --> 00:00:06.710
we will take a look at the core concepts
of a Linux operating system.

3
00:00:07.220 --> 00:00:09.450
We will start with the Linux Kernel,

4
00:00:09.840 --> 00:00:11.420
understand what it is

5
00:00:11.420 --> 00:00:12.880
and why it's important.

6
00:00:13.120 --> 00:00:16.050
We will then learn about the Kernel
and userspace.

7
00:00:16.840 --> 00:00:17.550
Next,

8
00:00:17.550 --> 00:00:19.380
we will look at how Linux works

9
00:00:19.380 --> 00:00:22.460
with the hardware resources
available to the system

10
00:00:22.460 --> 00:00:24.950
and how to make use of Kernel modules.

11
00:00:25.600 --> 00:00:28.850
This is followed by a hands-on lab exercise.

12
00:00:29.480 --> 00:00:30.480
After this,

13
00:00:30.480 --> 00:00:34.620
we will check out a simplified overview
of the boot process in Linux,

14
00:00:34.880 --> 00:00:37.360
learn about the different types
of run levels.

15
00:00:38.400 --> 00:00:40.110
We will wrap up this section

16
00:00:40.110 --> 00:00:42.980
understanding the different file types
in Linux

17
00:00:42.980 --> 00:00:44.740
and the file system hierarchy.

18
00:00:47.950 --> 00:00:50.640
If you have worked with any operating system,

19
00:00:50.640 --> 00:00:53.560
you are likely to have run
into the term Kernel,

20
00:00:54.040 --> 00:00:55.780
so what is a Kernel?

21
00:00:56.910 --> 00:01:00.340
Kernel is the major component
of an operating system

22
00:01:00.340 --> 00:01:03.740
and is the core interface
between a computer's hardware

23
00:01:03.740 --> 00:01:05.010
and its processes.

24
00:01:05.280 --> 00:01:08.410
It communicates
between the two managing resources

25
00:01:08.410 --> 00:01:10.180
as efficiently as possible.

26
00:01:12.200 --> 00:01:14.960
To understand a Kernel in simple terms,

27
00:01:14.960 --> 00:01:16.320
let us use an analogy.

28
00:01:16.850 --> 00:01:21.450
One of the best ones I have come across
is an analogy of a college library.

29
00:01:22.200 --> 00:01:26.080
This library has several resources
at its disposal;

30
00:01:26.580 --> 00:01:27.480
books,

31
00:01:27.480 --> 00:01:28.620
study guides,

32
00:01:28.620 --> 00:01:30.100
reference materials,

33
00:01:30.260 --> 00:01:32.380
fictional and nonfictional books,

34
00:01:32.650 --> 00:01:33.840
DVDs,

35
00:01:33.840 --> 00:01:35.010
blu-rays,

36
00:01:35.010 --> 00:01:37.020
and workstations for students,

37
00:01:37.020 --> 00:01:38.080
to name a few.

38
00:01:38.780 --> 00:01:41.950
These resources, however,
are limited in number.

39
00:01:42.610 --> 00:01:45.550
The resources are used
by the college students.

40
00:01:46.620 --> 00:01:48.710
The person in charge of the library

41
00:01:48.710 --> 00:01:50.910
and a key member of this system

42
00:01:50.910 --> 00:01:52.550
is, of course, the librarian.

43
00:01:53.260 --> 00:01:55.620
Let us for a minute assume a scenario

44
00:01:55.620 --> 00:01:57.610
where there was no librarian.

45
00:01:58.400 --> 00:02:00.340
We may have a handful of students

46
00:02:00.340 --> 00:02:03.510
searching through every nook
and corner of the library,

47
00:02:03.700 --> 00:02:07.110
borrowing whatever materials
they can lay their hands on,

48
00:02:07.580 --> 00:02:10.380
there would be no track of who borrowed what

49
00:02:10.380 --> 00:02:12.980
and when a material is due to be returned.

50
00:02:13.580 --> 00:02:17.710
The books may not be returned
back to the library by the due date.

51
00:02:18.240 --> 00:02:20.260
This mismanaged system

52
00:02:20.260 --> 00:02:23.300
could also mean that the resources
may not be available

53
00:02:23.300 --> 00:02:25.810
for other students when they really need it.

54
00:02:26.760 --> 00:02:28.300
Enter the librarian,

55
00:02:28.300 --> 00:02:32.280
who ensures that students only get books
according to the year they are in

56
00:02:32.540 --> 00:02:34.550
limiting one book per student.

57
00:02:35.040 --> 00:02:38.200
The librarian keeps track
of all the books borrowed

58
00:02:38.200 --> 00:02:39.480
and when they are due.

59
00:02:39.840 --> 00:02:44.510
The librarian also sends notifications
to the students before the due date

60
00:02:44.510 --> 00:02:47.380
and make sure
the resources are returned back

61
00:02:47.620 --> 00:02:50.810
so that they can be used
by other students subsequently.

62
00:02:52.280 --> 00:02:57.180
The library in this analogy is comparable
to a computer operating system.

63
00:02:57.920 --> 00:02:58.850
The books,

64
00:02:58.850 --> 00:03:00.240
reference materials,

65
00:03:00.240 --> 00:03:02.750
and other resources in this analogy

66
00:03:02.750 --> 00:03:05.110
are equivalent to hardware resources,

67
00:03:05.560 --> 00:03:08.450
the students are the application processes,

68
00:03:08.840 --> 00:03:11.060
the librarian in this example

69
00:03:11.060 --> 00:03:13.180
is equivalent to a Linux Kernel.

70
00:03:16.110 --> 00:03:19.440
The Kernel is responsible
for four major tasks.

71
00:03:20.020 --> 00:03:21.410
Memory management

72
00:03:21.740 --> 00:03:26.080
keep track of how much memory
is used to store what and where.

73
00:03:27.060 --> 00:03:28.350
Process management

74
00:03:28.740 --> 00:03:32.110
determine which processes can use the CPU

75
00:03:32.110 --> 00:03:33.980
when, and for how long.

76
00:03:34.900 --> 00:03:36.350
Device drivers

77
00:03:36.600 --> 00:03:38.160
act as a mediator

78
00:03:38.160 --> 00:03:41.710
or an interpreter
between the hardware and processes.

79
00:03:42.500 --> 00:03:44.560
System calls and security

80
00:03:44.800 --> 00:03:47.980
receive requests for service
from the processes.

81
00:03:49.160 --> 00:03:51.380
The Linux Kernel is monolithic.

82
00:03:51.660 --> 00:03:55.460
This means that the Kernel
carries out CPU scheduling,

83
00:03:55.460 --> 00:03:56.780
memory management,

84
00:03:56.780 --> 00:03:59.660
and several other operations by itself.

85
00:04:00.360 --> 00:04:02.560
The Kernel is also modular,

86
00:04:02.560 --> 00:04:04.920
which means it can extend its capabilities

87
00:04:04.920 --> 00:04:08.150
through the use
of dynamically loaded Kernel modules.

88
00:04:10.160 --> 00:04:14.060
Let us now look at ways
to identify the Linux Kernel version

89
00:04:14.060 --> 00:04:16.280
and understand the naming conventions.

90
00:04:17.080 --> 00:04:20.450
The Kernel is an integral part
of the operating system.

91
00:04:21.060 --> 00:04:23.110
Use the Uname command

92
00:04:23.110 --> 00:04:25.510
to display information about the Kernel.

93
00:04:25.880 --> 00:04:28.640
By itself,
it does not provide much information

94
00:04:28.640 --> 00:04:31.460
except that the system uses a Linux Kernel.

95
00:04:32.240 --> 00:04:37.110
Use the dash R or dash A flag
to print the Kernel version.

96
00:04:37.950 --> 00:04:40.660
Here you will see that this operating system

97
00:04:40.660 --> 00:04:47.480
is running a Kernel version
of 4.15.0-72-generic.

98
00:04:48.460 --> 00:04:51.850
Here, 4 stands for the Linux Kernel version,

99
00:04:52.180 --> 00:04:54.420
15 is the major version,

100
00:04:54.780 --> 00:04:56.580
0, the minor version,

101
00:04:56.910 --> 00:04:59.010
72, the patch level,

102
00:04:59.200 --> 00:05:00.220
and finally,

103
00:05:00.220 --> 00:05:04.350
generic is the Linux distro
specific additional information.

104
00:05:05.350 --> 00:05:10.280
The first Linux Kernel was developed
by Linus Torvalds in 1991.

105
00:05:10.980 --> 00:05:16.880
The latest release as of this recording
is version 5.5.10,

106
00:05:16.880 --> 00:05:20.440
which was released on the 18th of March 2020.

107
00:05:21.360 --> 00:05:23.280
All Linux distributions

108
00:05:23.280 --> 00:05:26.610
make use of any one
of these versions of Kernel.

109
00:05:26.980 --> 00:05:28.150
For example,

110
00:05:28.150 --> 00:05:30.580
Ubuntu 20.04,

111
00:05:30.580 --> 00:05:33.000
which was released in April 2020

112
00:05:33.340 --> 00:05:36.610
uses the Linux Kernel 5 out of the box.

113
00:05:37.520 --> 00:05:39.460
If you are interested to learn more,

114
00:05:39.710 --> 00:05:41.650
check out kernel.org.

115
00:05:41.920 --> 00:05:44.080
This is an open-source project

116
00:05:44.080 --> 00:05:46.000
that hosts the repositories

117
00:05:46.000 --> 00:05:50.510
that make all versions of the Kernel
source code available to all users.

118
00:05:53.420 --> 00:05:56.660
One of the important functions
of the Linux Kernel

119
00:05:56.660 --> 00:05:58.080
is memory management.

120
00:05:58.560 --> 00:06:02.550
We will now see how memory
is separated within the Linux Kernel.

121
00:06:03.610 --> 00:06:06.380
Memory is divided into two areas

122
00:06:06.380 --> 00:06:09.200
known as Kernel space and userspace.

123
00:06:09.520 --> 00:06:13.560
These are synonymous
to the terms Kernel and user mode.

124
00:06:14.660 --> 00:06:16.800
Kernel space is the portion of memory

125
00:06:16.800 --> 00:06:20.380
in which the Kernel executes
and provides its services.

126
00:06:20.620 --> 00:06:22.980
A process running in the Kernel space

127
00:06:22.980 --> 00:06:25.850
has unrestricted access to the hardware.

128
00:06:25.850 --> 00:06:29.280
As such, it is strictly reserved
for running the Kernel code,

129
00:06:29.640 --> 00:06:31.080
Kernel extensions,

130
00:06:31.080 --> 00:06:32.950
and most device drivers.

131
00:06:33.860 --> 00:06:35.560
Going back to our analogy

132
00:06:35.800 --> 00:06:38.410
where the Kernel is compared
to the librarian,

133
00:06:38.800 --> 00:06:42.380
Kernel space can be compared
to a section of the library

134
00:06:42.380 --> 00:06:47.160
that only the librarian or administrators
of the library have access to.

135
00:06:47.640 --> 00:06:51.510
These sections contain books
and other reference materials.

136
00:06:52.380 --> 00:06:53.650
On the other hand,

137
00:06:53.650 --> 00:06:56.340
all processes running outside the Kernel

138
00:06:56.340 --> 00:06:58.400
reside in the user space

139
00:06:58.400 --> 00:07:01.550
which has restricted access
to CPU and memory.

140
00:07:02.480 --> 00:07:05.180
Most Unix-like operating systems,

141
00:07:05.180 --> 00:07:06.600
including Linux,

142
00:07:06.600 --> 00:07:09.860
come prepackaged
with all kinds of utilities

143
00:07:09.860 --> 00:07:11.280
programming languages,

144
00:07:11.280 --> 00:07:12.810
and graphical tools.

145
00:07:13.280 --> 00:07:16.210
These are called user-space applications.

146
00:07:16.580 --> 00:07:20.380
This is also often referred to
as the Userland.

147
00:07:21.310 --> 00:07:25.740
The Userland is comparable to areas
designated for normal students

148
00:07:25.740 --> 00:07:27.000
to read the books

149
00:07:27.000 --> 00:07:29.680
and make use of other reference materials.

150
00:07:30.010 --> 00:07:32.860
Examples of user-space applications

151
00:07:32.860 --> 00:07:35.440
include programs that are written in C,

152
00:07:35.880 --> 00:07:36.710
Java,

153
00:07:36.960 --> 00:07:38.940
Python, Ruby,

154
00:07:38.940 --> 00:07:41.250
or any other programming language.

155
00:07:44.180 --> 00:07:48.150
Let us now look at how programs
running in the user space work.

156
00:07:48.940 --> 00:07:52.550
All user programs function
by manipulating data,

157
00:07:53.040 --> 00:07:54.680
but where does this data live?

158
00:07:55.240 --> 00:07:56.480
Most commonly,

159
00:07:56.480 --> 00:07:59.100
it is stored in memory and on disk.

160
00:07:59.100 --> 00:08:01.900
User programs get access to data

161
00:08:01.900 --> 00:08:06.180
by making special requests
to the Kernel called system calls.

162
00:08:06.710 --> 00:08:11.710
Examples include allocating memory
by using variables or opening a file.

163
00:08:12.660 --> 00:08:15.100
If we compare this to our analogy,

164
00:08:15.100 --> 00:08:18.110
students must make requests
to the librarian

165
00:08:18.110 --> 00:08:21.810
to borrow specific books
from certain sections of the library.

166
00:08:22.140 --> 00:08:25.780
The books would only be issued
once the librarian approves it.

167
00:08:28.960 --> 00:08:30.020
For example,

168
00:08:30.020 --> 00:08:36.200
opening a file such as the /etc/os-release file

169
00:08:36.520 --> 00:08:39.820
to see the version
of the operating system installed

170
00:08:39.820 --> 00:08:41.480
results in a system call.

171
00:08:42.260 --> 00:08:45.910
Here, the opens the file
specified by pathname.

172
00:08:46.400 --> 00:08:49.980
The file is located in the /etc directory

173
00:08:49.980 --> 00:08:53.750
which is mounted on a file system
created on a block device.

174
00:08:54.320 --> 00:08:57.340
Examples of other common system calls are

175
00:08:57.340 --> 00:08:58.510
close,

176
00:08:58.660 --> 00:08:59.560
get PID,

177
00:08:59.960 --> 00:09:01.140
read directory,

178
00:09:01.620 --> 00:09:02.680
string length,

179
00:09:02.980 --> 00:09:04.750
and close directory.
