WEBVTT

1
00:00:01.020 --> 00:00:04.310
Next, we will take a look
at IO redirection.

2
00:00:04.770 --> 00:00:08.170
Before we start, let us
get familiar with the concept

3
00:00:08.310 --> 00:00:12.970
of standard streams in Linux.
There are three data streams

4
00:00:13.050 --> 00:00:15.800
created when you launch
a Linux command.

5
00:00:17.080 --> 00:00:23.370
Stdin is the standard input string.
This accepts text as its input.

6
00:00:24.450 --> 00:00:27.710
Text output from the command
that you see printed on

7
00:00:27.820 --> 00:00:29.450
your screen is delivered via

8
00:00:29.540 --> 00:00:33.200
the stdout or the standard
out stream.

9
00:00:34.110 --> 00:00:36.540
Error messages from the command
are sent through

10
00:00:36.650 --> 00:00:40.170
the standard error stream,
with IO redirection.

11
00:00:40.340 --> 00:00:44.450
The standard input-output
and error can be redirected

12
00:00:44.600 --> 00:00:48.250
to text files.
Let's see how to do that next.

13
00:00:51.170 --> 00:00:55.000
To redirect standard output to
a file instead of printing it

14
00:00:55.140 --> 00:00:58.450
on the screen, we can use
the forward arrow symbol

15
00:00:58.740 --> 00:01:03.000
followed by the name of the file.
The forward arrow symbol

16
00:01:03.140 --> 00:01:06.800
overwrites the contents of
the file with the stdout.

17
00:01:07.170 --> 00:01:10.940
If you want to append stdout
to an existing file,

18
00:01:11.110 --> 00:01:13.650
use the double forward
arrow symbol.

19
00:01:13.880 --> 00:01:17.850
In this case, the string,
"This is the Bash shell"

20
00:01:18.110 --> 00:01:21.820
is appended to the existing shell
.txt file.

21
00:01:24.540 --> 00:01:27.820
In order to redirect just
the error messages,

22
00:01:28.050 --> 00:01:31.940
we need to use the number 2
followed by a forward arrow symbol,

23
00:01:32.110 --> 00:01:35.620
and then the name of the file
in which the errors will be written.

24
00:01:36.910 --> 00:01:40.910
If the file doesn't exist,
a new one will be created.

25
00:01:41.140 --> 00:01:43.910
Otherwise, the file
will be overwritten.

26
00:01:44.370 --> 00:01:47.970
To append the standard error
to an existing file,

27
00:01:48.220 --> 00:01:51.250
use the number 2 double
forward symbol.

28
00:01:51.650 --> 00:01:54.540
If you want your command
to execute and not print

29
00:01:54.710 --> 00:01:57.400
error messages on the screen,
even if it generates

30
00:01:57.570 --> 00:02:04.620
a standard error, you can redirect
to /dev/null, like this.

31
00:02:05.970 --> 00:02:09.910
/dev/null is referred to as
the bit bucket.

32
00:02:10.250 --> 00:02:13.710
The place where you dump anything
you don't need, in this case,

33
00:02:13.910 --> 00:02:17.170
the standard error, which we
do not want to be printed

34
00:02:17.220 --> 00:02:18.370
on the screen.

35
00:02:21.310 --> 00:02:22.620
In the previous section,

36
00:02:22.880 --> 00:02:26.340
we saw how to redirect
data streams to a text file.

37
00:02:26.940 --> 00:02:31.340
These files can later be read
or processed by a different command.

38
00:02:32.050 --> 00:02:35.910
Redirecting data to a file
to be later consumed by another

39
00:02:35.970 --> 00:02:41.220
command can be a tedious process.
Fortunately, we can overcome this

40
00:02:41.310 --> 00:02:43.880
by making use of
command-line pipes.

41
00:02:44.310 --> 00:02:48.220
Command-line pipes allow
the linking of multiple commands.

42
00:02:48.510 --> 00:02:52.680
In simple terms, pipes allow
the first command standard out

43
00:02:52.800 --> 00:02:56.450
to be used as the standard input
for the second command.

44
00:02:56.800 --> 00:03:00.000
The pipes are defined using
the vertical bar symbol.

45
00:03:00.400 --> 00:03:05.310
Here's an example,
the sample.txt file contains

46
00:03:05.420 --> 00:03:08.940
two lines.
The first line is, "Hello there!"

47
00:03:09.280 --> 00:03:12.170
The second line is
"Nice to see you here!"

48
00:03:13.280 --> 00:03:17.110
By making use of the pipe,
the output of the command grep

49
00:03:17.220 --> 00:03:22.250
hello sample.txt becomes
the standard input for the less

50
00:03:22.340 --> 00:03:25.170
command that follows
after the operator.

51
00:03:25.940 --> 00:03:30.080
In this case, the less command will
only display the pattern matched

52
00:03:30.220 --> 00:03:33.080
by the grep command before
the pipe as compared

53
00:03:33.170 --> 00:03:37.370
to the entire file.
Command-line pipes can be used

54
00:03:37.480 --> 00:03:41.680
as many times as needed to link
together commands, as long as

55
00:03:41.770 --> 00:03:45.250
the commands themselves are
used with the correct syntax.

56
00:03:48.310 --> 00:03:52.000
Another useful command to work
with standard input and standard

57
00:03:52.140 --> 00:03:56.770
output is the tee command.
Consider the same example

58
00:03:56.910 --> 00:04:00.510
we saw a bit earlier while
redirecting output to a file,

59
00:04:01.170 --> 00:04:05.600
instead of the redirect operator,
we can use a command-line pipe

60
00:04:05.940 --> 00:04:09.140
followed by the tee command
and the file name to

61
00:04:09.220 --> 00:04:12.880
redirect the output.
The difference is that with tee,

62
00:04:13.110 --> 00:04:16.400
the standard output is still
printed on the screen before

63
00:04:16.510 --> 00:04:19.820
overwriting the contents of
the file with the same string.

64
00:04:20.820 --> 00:04:25.480
Use tee -a option to append
the file instead of overwriting it.
