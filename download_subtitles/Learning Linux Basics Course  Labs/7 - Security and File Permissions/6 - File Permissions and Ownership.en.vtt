WEBVTT

1
00:00:01.580 --> 00:00:06.610
We learned earlier that the LS command
can be used to determine the type of file.

2
00:00:07.140 --> 00:00:09.340
The first letter of the first column

3
00:00:09.340 --> 00:00:13.780
in the listing from an ls-l command
indicates the file type.

4
00:00:14.600 --> 00:00:21.910
In this case, the dash implies
the file called bash-script.sh is a file.

5
00:00:22.700 --> 00:00:28.040
Similarly, identifiers for other file types
are d for directory,

6
00:00:28.040 --> 00:00:29.820
c for character device,

7
00:00:30.110 --> 00:00:31.800
b for block device,

8
00:00:32.060 --> 00:00:33.320
l for links,

9
00:00:33.720 --> 00:00:35.520
s for socket files,

10
00:00:35.520 --> 00:00:37.750
and p for named pipes.

11
00:00:38.040 --> 00:00:42.780
What do the other characters
such as rwx in the first column mean?

12
00:00:43.380 --> 00:00:47.210
These characters describe
the file permissions in Linux.

13
00:00:50.220 --> 00:00:53.900
These characters can be broken down
as the owner permissions,

14
00:00:53.900 --> 00:00:55.280
group permissions,

15
00:00:55.440 --> 00:00:56.920
and permissions for others.

16
00:00:57.580 --> 00:01:00.950
The first three characters
after the file identifier

17
00:01:00.950 --> 00:01:03.340
are the permissions for the owner of the file

18
00:01:03.660 --> 00:01:05.210
denoted by the letter u.

19
00:01:05.950 --> 00:01:09.680
The next three characters are permissions
for the group owning the file

20
00:01:10.120 --> 00:01:11.480
denoted by a g.

21
00:01:12.050 --> 00:01:16.980
Finally, the last three characters
are the permissions for all other users,

22
00:01:17.160 --> 00:01:18.450
denoted by o.

23
00:01:19.160 --> 00:01:21.000
When an r bit is set,

24
00:01:21.000 --> 00:01:24.340
the respective user
has read permissions to the file.

25
00:01:24.640 --> 00:01:27.010
It has the octal value of four.

26
00:01:27.510 --> 00:01:30.380
We will see what an octal value is in a minute.

27
00:01:31.040 --> 00:01:33.060
When the w bit is set,

28
00:01:33.060 --> 00:01:35.480
they have write permissions to the file

29
00:01:35.640 --> 00:01:37.680
with an octal value of two.

30
00:01:38.220 --> 00:01:40.680
Finally, if the x bit is set,

31
00:01:40.940 --> 00:01:44.380
the user has the execute permissions
for the file,

32
00:01:44.380 --> 00:01:46.450
which has an octal value of one.

33
00:01:49.320 --> 00:01:50.620
With directories,

34
00:01:50.620 --> 00:01:55.180
the same set of permissions
that we saw for the file are still applicable.

35
00:01:55.680 --> 00:02:00.610
R bit when set allows the user
to read the contents of the directory,

36
00:02:00.950 --> 00:02:04.150
w bit allows right operation
in the directory,

37
00:02:04.840 --> 00:02:08.080
but what does the execute x bit do?

38
00:02:08.600 --> 00:02:12.010
Let us consider a directory
with the permissions shown here.

39
00:02:12.610 --> 00:02:14.560
The directory is owned by Bob

40
00:02:14.850 --> 00:02:17.820
and the owner
has only the execute permission

41
00:02:18.160 --> 00:02:19.080
as such.

42
00:02:19.080 --> 00:02:22.420
If Bob tries to list
the contents of the directory,

43
00:02:22.420 --> 00:02:24.650
he will get a "Permission denied" error.

44
00:02:24.850 --> 00:02:27.920
This is because
despite being the owner of the directory,

45
00:02:28.260 --> 00:02:30.850
Bob does not have read access to it.

46
00:02:31.400 --> 00:02:35.380
All the other users, however,
have full access to this directory

47
00:02:35.520 --> 00:02:39.810
because they have the read, write,
and execute bit set for them.

48
00:02:40.240 --> 00:02:43.420
Bob, however, can cd into the directory

49
00:02:43.420 --> 00:02:46.610
since the directory has the x bit
set for the owner.

50
00:02:47.260 --> 00:02:47.940
But wait,

51
00:02:48.410 --> 00:02:50.810
Bob is part of the group called bob,

52
00:02:51.120 --> 00:02:53.510
which has full access to the directory.

53
00:02:54.040 --> 00:02:56.650
Why doesn't he have read access then?

54
00:02:57.680 --> 00:02:59.720
This is because in Linux,

55
00:02:59.720 --> 00:03:04.380
the system identifies the user
trying to access the file or directory

56
00:03:04.660 --> 00:03:06.860
and checks the permissions sequentially.

57
00:03:07.360 --> 00:03:09.960
If the user trying to access is the owner,

58
00:03:10.340 --> 00:03:13.380
the owner's permissions
for the file are applied

59
00:03:13.600 --> 00:03:14.980
and the rest is ignored.

60
00:03:15.420 --> 00:03:19.480
Similarly, if the user is not the owner
but part of the group,

61
00:03:19.800 --> 00:03:22.040
only the group permissions are applied.

62
00:03:22.550 --> 00:03:23.950
The others are ignored.

63
00:03:26.980 --> 00:03:30.510
Now, let us look at the octal values
we discussed earlier.

64
00:03:31.120 --> 00:03:34.650
The rwx permissions we have seen so far

65
00:03:34.650 --> 00:03:39.440
can be represented by a three digit
numeric value in octal notation.

66
00:03:39.840 --> 00:03:42.420
Each permission has a corresponding value.

67
00:03:43.220 --> 00:03:46.080
R, the read bit, has a value of four.

68
00:03:46.680 --> 00:03:50.410
W, the write permission, has a value of two.

69
00:03:50.920 --> 00:03:54.650
X or the execute bit has a value of one.

70
00:03:55.340 --> 00:03:58.510
For no permission, use the value zero.

71
00:03:59.350 --> 00:04:03.040
The permission of rwx would be seven,

72
00:04:03.040 --> 00:04:05.750
which is 4+2+1,

73
00:04:06.120 --> 00:04:08.580
and r-x would be five,

74
00:04:08.580 --> 00:04:11.280
which is 4+0+1.

75
00:04:12.150 --> 00:04:15.520
Similarly, by adding
the corresponding values,

76
00:04:15.520 --> 00:04:18.550
we can see that the write
and execute permission

77
00:04:18.550 --> 00:04:20.550
can be represented by three,

78
00:04:20.820 --> 00:04:25.150
and read an execute permission
by five in octal notation.

79
00:04:27.920 --> 00:04:31.750
Now that we know how file permissions
are represented in Linux,

80
00:04:31.750 --> 00:04:35.060
let us use that
to change permissions of some files.

81
00:04:36.110 --> 00:04:41.410
The command used to modify
the permissions of a file is called chmod,

82
00:04:41.920 --> 00:04:44.450
and the syntax to use this command

83
00:04:44.450 --> 00:04:50.250
is chmod followed by the permission
and finally, the file name.

84
00:04:51.020 --> 00:04:53.920
Permissions can be modified in two ways,

85
00:04:53.920 --> 00:04:56.310
symbolic mode and numeric mode.

86
00:04:56.980 --> 00:04:59.360
Both modes lead to the same result.

87
00:05:00.080 --> 00:05:05.050
In symbolic mode, the first characters
following the chmod command

88
00:05:05.050 --> 00:05:08.010
specify whose permission you want to alter.

89
00:05:08.660 --> 00:05:10.920
For the user, you specify u,

90
00:05:11.280 --> 00:05:12.650
g for the group,

91
00:05:12.650 --> 00:05:14.150
and o for others.

92
00:05:14.850 --> 00:05:19.180
These three can be clubbed together
in any combination as required.

93
00:05:19.710 --> 00:05:25.020
After these characters, you need to specify
if you want to grant access with a plus symbol

94
00:05:25.280 --> 00:05:28.380
or revoke existing access
with the minus symbol.

95
00:05:29.080 --> 00:05:34.210
Finally, we provide the file or directory
for which the permissions have to be changed.

96
00:05:37.240 --> 00:05:41.010
Let us now see the same operation
using the numeric mode.

97
00:05:41.480 --> 00:05:45.060
In this mode, we can specify
the permission to be updated

98
00:05:45.060 --> 00:05:48.710
in terms of the three digit octal values
we saw earlier.

99
00:05:49.210 --> 00:05:52.840
The first of the three digit value
is the permissions for the owner.

100
00:05:53.250 --> 00:05:55.310
The next, that of the group.

101
00:05:55.480 --> 00:05:59.710
Finally, the last digits,
the permissions of others.

102
00:06:00.380 --> 00:06:04.360
Chmod 777 applies seven,

103
00:06:04.720 --> 00:06:08.460
which is read, write, execute to every user,

104
00:06:08.860 --> 00:06:11.650
owner, group, and others to the file.

105
00:06:12.420 --> 00:06:18.480
Chmod 555 applies read
and execute permissions for all.

106
00:06:19.320 --> 00:06:24.220
660 provides read and write
for user and group,

107
00:06:24.220 --> 00:06:26.110
but no permissions for others.

108
00:06:26.680 --> 00:06:31.540
Finally, 750 provides
complete access to owners,

109
00:06:31.800 --> 00:06:33.950
read and execute for group,

110
00:06:33.950 --> 00:06:36.450
and no permissions for anyone else.

111
00:06:37.080 --> 00:06:39.220
You can change permissions accordingly

112
00:06:39.220 --> 00:06:42.750
by using the correct sequence
of the three digit octal values.

113
00:06:45.840 --> 00:06:50.280
Now that we have seen how to assign
permissions to a file or directory,

114
00:06:50.280 --> 00:06:53.210
let's see how to change
the ownership and group.

115
00:06:53.560 --> 00:06:56.450
This can be done using the chown command.

116
00:06:57.250 --> 00:07:00.100
The syntax for this is chown

117
00:07:00.540 --> 00:07:04.580
followed by the new owner
and group separated by a colon,

118
00:07:04.850 --> 00:07:06.950
and finally, the file or directory.

119
00:07:07.940 --> 00:07:10.000
If a group is not provided,

120
00:07:10.000 --> 00:07:11.910
only the ownership is changed.

121
00:07:12.260 --> 00:07:16.610
The group can be changed
using a similar command called chgrp.

122
00:07:17.060 --> 00:07:21.250
This command modifies
only the group of the file or directory.

123
00:07:23.800 --> 00:07:27.880
Now, let us test these concepts
with a hands-on lab exercise.
